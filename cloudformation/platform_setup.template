{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Setup",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "Default" : "production",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "InstanceType" : {
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.medium", "c1.xlarge"]
    },

    "Bucket" : {
      "Type" : "String",
      "Description" : "S3Bucket"
    },

    "GithubUsername" : {
      "Type" : "String",
      "Default" : "student29"
    },

    "GithubPassword" : {
      "Type" : "String",
      "NoEcho" : "TRUE"
    },

    "GithubOrganization" : {
      "Description" : "Either your Github username or Github organization. This is used to find the repo",
      "Type" : "String",
      "Default" : "OpenDelivery"
    },

    "ProjectName" : {
      "Type" : "String",
      "Default" : "simple_app_29"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"   : { "Arch" : "64" },
      "m1.small"   : { "Arch" : "64" },
      "m1.medium"  : { "Arch" : "64" },
      "m1.large"   : { "Arch" : "64" },
      "m1.xlarge"  : { "Arch" : "64" },
      "m2.xlarge"  : { "Arch" : "64" },
      "m2.2xlarge" : { "Arch" : "64" },
      "m2.4xlarge" : { "Arch" : "64" },
      "c1.medium"  : { "Arch" : "64" },
      "c1.xlarge"  : { "Arch" : "64" }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-7f418316", "64" : "ami-7341831a" },
      "us-west-1"      : { "32" : "ami-951945d0", "64" : "ami-971945d2" },
      "us-west-2"      : { "32" : "ami-16fd7026", "64" : "ami-10fd7020" },
      "eu-west-1"      : { "32" : "ami-24506250", "64" : "ami-20506254" },
      "ap-southeast-1" : { "32" : "ami-74dda626", "64" : "ami-7edda62c" },
      "ap-northeast-1" : { "32" : "ami-dcfa4edd", "64" : "ami-e8fa4ee9" }
    }
  },
  "Resources" : {

    "RootRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
             },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement": [ {
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            } ]
          }
        } ]
      }
    },
    "RootInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "RootRole"
        } ]
      }
    },

    "WebServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {

            "files" : {

              "/tmp/common-step-definitions-1.0.0.gem" : {
                "source" : "https://s3.amazonaws.com/OpenDelivery/resources/gems/common-step-definitions-1.0.0.gem",
                "mode"   : "000500",
                "owner"  : "ec2-user",
                "group"  : "ec2-user"
              },
              "/root/.ssh/config" : {
                "content" : { "Fn::Join" : ["", [
                  "Host github.com\n",
                  "StrictHostKeyChecking no\n"
                ]]},
                "mode"   : "000600",
                "owner"  : "root",
                "group"  : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"     : { "Ref" : "InstanceType" },
        "SecurityGroups"   : [ { "Ref" : "FrontendGroup" } ],
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags": [ { "Key": "Name", "Value": "AWSCLI" } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "yum update -y aws-cfn-bootstrap\n",

          "# Install Packages\n",
          "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" },
          " -r WebServer ",
          " --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Remove Ruby 1.8.7\n",
          "yum erase -y ruby rubygems\n",

          "# Install Ruby 1.9.3\n",
          "yum -y install ruby19-devel\n",
          "yum -y install libxml2-devel\n",
          "yum -y install libxslt-devel\n",
          "yum -y install git\n",
          "yum -y install make\n",
          "yum -y install gcc\n",

          "# Move Ruby 1.9.3 to Default Ruby\n",
          "ln -s /usr/bin/ruby1.9 /usr/bin/ruby\n",
          "ln -s /usr/bin/gem1.9 /usr/bin/gem\n",

          "# Clone Github Repository\n",
          "git clone https://", { "Ref" : "GithubUsername" },":", { "Ref" : "GithubPassword" }, "@github.com/", { "Ref" : "GithubOrganization" },"/", { "Ref" : "ProjectName" }, "_platform.git /tmp/platform\n",
          "git clone https://", { "Ref" : "GithubUsername" },":", { "Ref" : "GithubPassword" }, "@github.com/", { "Ref" : "GithubOrganization" },"/", { "Ref" : "ProjectName" }, "_jenkins.git /tmp/jenkins\n",

          "# Generate SSH keypairs\n",
          "ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa\n",

          "# Install RubyGems\n",
          "gem install trollop     --version 2.0      --no-rdoc --no-ri\n",
          "gem install aws-sdk     --version 1.5.6    --no-rdoc --no-ri\n",

          "# Push platform dependencies up to S3\n",
          "ruby /tmp/platform/lib/s3_upload.rb --filename /root/.ssh/id_rsa                                              --key private/id_rsa                            --bucket ", { "Ref" : "Bucket" } , "\n",
          "ruby /tmp/platform/lib/s3_upload.rb --filename /root/.ssh/id_rsa.pub                                          --key private/id_rsa.pub                        --bucket ", { "Ref" : "Bucket" } , "\n",
          "ruby /tmp/platform/lib/s3_upload.rb --filename /tmp/platform/infrastructure/account/platform_setup.template   --key templates/platform_setup.template         --bucket ", { "Ref" : "Bucket" } , "\n",
          "ruby /tmp/platform/lib/s3_upload.rb --filename /tmp/platform/infrastructure/account/jenkins.windows.template  --key templates/jenkins.template                --bucket ", { "Ref" : "Bucket" } , "\n",

          "/opt/aws/bin/cfn-signal", " -e 0", " '", { "Ref" : "WaitHandle" }, "'","\n"
        ]]}}
      }
    },

    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH Access",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },

    "IPAddress" : {
      "Type" : "AWS::EC2::EIP"
    },

    "IPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "WebServer" },
        "EIP" : { "Ref" : "IPAddress" }
      }
    },

    "JenkinsStack" : {
      "Type" : "AWS::CloudFormation::Stack",
      "DependsOn" : "WaitCondition",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "Bucket" }, "/templates/jenkins.windows.template"]]},
        "TimeoutInMinutes" : "20",
        "Parameters" : {
          "KeyName" : { "Ref" : "KeyName" },
          "InstanceType" : "m1.small",
          "SetupTemplate" : { "Ref" : "AWS::StackName" },
          "ProjectName": { "Ref" : "ProjectName" }
        }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServer",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "900"
      }
    }
  },

  "Outputs" : {
  "InstanceIPAddress" : {
      "Value" : { "Ref" : "IPAddress" }
    }
  }
}
